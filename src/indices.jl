# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

# ---------------
# LINEAR INDICES
# ---------------

"""
    indices(domain, geometry)

Return the indices of the elements of the `domain` that intersect with the `geometry`.
"""
indices(domain::Domain, geometry::Geometry) = findall(intersects(geometry), domain)

function indices(grid::OrthoRegularGrid, point::Point)
  point ‚àâ grid && return Int[]

  # grid properties
  orig = minimum(grid)
  spac = spacing(grid)
  dims = size(grid)

  # integer coordinates
  coords = ceil.(Int, (point - orig) ./ spac)

  # fix coordinates that are on the grid border
  coords = clamp.(coords, 1, dims)

  # convert to linear index
  [LinearIndices(dims)[coords...]]
end

function indices(grid::OrthoRegularGrid, chain::Chain)
  dims = size(grid)
  mask = falses(dims)

  for segment in segments(chain)
    p‚ÇÅ, p‚ÇÇ = vertices(segment)
    _bresenham!(mask, grid, true, p‚ÇÅ, p‚ÇÇ)
  end

  LinearIndices(dims)[mask]
end

function indices(grid::OrthoRegularGrid, poly::Polygon)
  dims = size(grid)
  mask = zeros(Int, dims)
  cpoly = poly ‚à© boundingbox(grid)
  isnothing(cpoly) && return Int[]

  for (i, triangle) in enumerate(simplexify(cpoly))
    _fill!(mask, grid, i, triangle)
  end

  LinearIndices(dims)[mask .> 0]
end

function indices(grid::OrthoRegularGrid, box::Box)
  # cartesian range
  range = cartesianrange(grid, box)

  # convert to linear indices
  LinearIndices(size(grid))[range] |> vec
end

indices(grid::OrthoRegularGrid, multi::Multi) = mapreduce(geom -> indices(grid, geom), vcat, parent(multi)) |> unique

function indices(grid::RectilinearGrid, box::Box)
  # cartesian range
  range = cartesianrange(grid, box)

  # convert to linear indices
  LinearIndices(size(grid))[range] |> vec
end

# ----------------
# CARTESIAN RANGE
# ----------------

"""
    cartesianrange(grid, box)

Return the Cartesian range of the elements of the `grid` that intersect with the `box`.
"""
cartesianrange(grid::Grid{M}, box::Box{M}) where {M} = _manifoldrange(M, grid, box)

_manifoldrange(::Type{<:ùîº}, grid::Grid, box::Box) = _euclideanrange(grid, box)

_manifoldrange(::Type{<:üåê}, grid::Grid, box::Box) = _geodesicrange(grid, box)

function _euclideanrange(grid::OrthoRegularGrid, box::Box)
  # grid properties
  or = minimum(grid)
  sp = spacing(grid)
  sz = size(grid)

  # intersection of boxes
  lo, up = extrema(boundingbox(grid) ‚à© box)

  # Cartesian indices of new corners
  ijk‚Çõ = max.(ceil.(Int, (lo - or) ./ sp), 1)
  ijk‚Çë = min.(floor.(Int, (up - or) ./ sp) .+ 1, sz)

  # Cartesian range from corner to corner
  CartesianIndex(Tuple(ijk‚Çõ)):CartesianIndex(Tuple(ijk‚Çë))
end

function _euclideanrange(grid::RectilinearGrid, box::Box)
  # grid properties
  nd = paramdim(grid)

  # intersection of boxes
  lo, up = to.(extrema(boundingbox(grid) ‚à© box))

  # integer coordinates of lower point
  ijk‚Çõ = ntuple(nd) do i
    findlast(x -> x ‚â§ lo[i], xyz(grid)[i])
  end

  # integer coordinates of upper point
  ijk‚Çë = ntuple(nd) do i
    findfirst(x -> x ‚â• up[i], xyz(grid)[i])
  end

  # integer coordinates of elements
  CartesianIndex(ijk‚Çõ):CartesianIndex(ijk‚Çë .- 1)
end

function _geodesicrange(grid::Grid, box::Box)
  nlon, nlat = vsize(grid)

  boxmin = convert(LatLon, coords(minimum(box)))
  boxmax = convert(LatLon, coords(maximum(box)))

  a = convert(LatLon, coords(vertex(grid, (1, 1))))
  b = convert(LatLon, coords(vertex(grid, (nlon, 1))))
  c = convert(LatLon, coords(vertex(grid, (1, nlat))))

  swaplon = a.lon > b.lon
  swaplat = a.lat > c.lat

  loninds = swaplon ? (nlon:-1:1) : (1:1:nlon)
  latinds = swaplat ? (nlat:-1:1) : (1:1:nlat)

  gridlon‚Çõ, gridlon‚Çë = swaplon ? (b.lon, a.lon) : (a.lon, b.lon)
  gridlat‚Çõ, gridlat‚Çë = swaplat ? (c.lat, a.lat) : (a.lat, c.lat)

  lonmin = max(boxmin.lon, gridlon‚Çõ)
  latmin = max(boxmin.lat, gridlat‚Çõ)
  lonmax = min(boxmax.lon, gridlon‚Çë)
  latmax = min(boxmax.lat, gridlat‚Çë)

  i‚Çõ = findlast(loninds) do i
    p = vertex(grid, (i, 1))
    c = convert(LatLon, coords(p))
    c.lon ‚â§ lonmin
  end
  i‚Çë = findfirst(loninds) do i
    p = vertex(grid, (i, 1))
    c = convert(LatLon, coords(p))
    c.lon ‚â• lonmax
  end

  j‚Çõ = findlast(latinds) do i
    p = vertex(grid, (1, i))
    c = convert(LatLon, coords(p))
    c.lat ‚â§ latmin
  end
  j‚Çë = findfirst(latinds) do i
    p = vertex(grid, (1, i))
    c = convert(LatLon, coords(p))
    c.lat ‚â• latmax
  end

  if i‚Çõ == i‚Çë || j‚Çõ == j‚Çë
    throw(ArgumentError("the passed limits are not valid for the grid"))
  end

  i‚Çõ, i‚Çë = swaplon ? (i‚Çë, i‚Çõ) : (i‚Çõ, i‚Çë)
  j‚Çõ, j‚Çë = swaplat ? (j‚Çë, j‚Çõ) : (j‚Çõ, j‚Çë)

  CartesianIndex(loninds[i‚Çõ], latinds[j‚Çõ]):CartesianIndex(loninds[i‚Çë] - 1, latinds[j‚Çë] - 1)
end

# -----------------
# HELPER FUNCTIONS
# -----------------

function _fill!(mask, grid, val, triangle)
  v = vertices(triangle)

  # fill edges of triangle
  _bresenham!(mask, grid, val, v[1], v[2])
  _bresenham!(mask, grid, val, v[2], v[3])
  _bresenham!(mask, grid, val, v[3], v[1])

  # fill interior of triangle
  j‚ÇÅ = findfirst(==(val), mask).I[2]
  j‚ÇÇ = findlast(==(val), mask).I[2]
  for j in j‚ÇÅ:j‚ÇÇ
    i‚ÇÅ = findfirst(==(val), @view(mask[:, j]))
    i‚ÇÇ = findlast(==(val), @view(mask[:, j]))
    mask[i‚ÇÅ:i‚ÇÇ, j] .= val
  end
end

# Bresenham's line algorithm: https://en.wikipedia.org/wiki/Bresenham's_line_algorithm
function _bresenham!(mask, grid, val, p‚ÇÅ, p‚ÇÇ)
  o = minimum(grid)
  s = spacing(grid)

  # integer coordinates
  x‚ÇÅ, y‚ÇÅ = ceil.(Int, (p‚ÇÅ - o) ./ s)
  x‚ÇÇ, y‚ÇÇ = ceil.(Int, (p‚ÇÇ - o) ./ s)

  # fix coordinates of points that are on the grid border
  xmax, ymax = size(grid)
  x‚ÇÅ = clamp(x‚ÇÅ, 1, xmax)
  y‚ÇÅ = clamp(y‚ÇÅ, 1, ymax)
  x‚ÇÇ = clamp(x‚ÇÇ, 1, xmax)
  y‚ÇÇ = clamp(y‚ÇÇ, 1, ymax)

  if abs(y‚ÇÇ - y‚ÇÅ) < abs(x‚ÇÇ - x‚ÇÅ)
    if x‚ÇÅ > x‚ÇÇ
      _bresenhamlow!(mask, val, x‚ÇÇ, y‚ÇÇ, x‚ÇÅ, y‚ÇÅ)
    else
      _bresenhamlow!(mask, val, x‚ÇÅ, y‚ÇÅ, x‚ÇÇ, y‚ÇÇ)
    end
  else
    if y‚ÇÅ > y‚ÇÇ
      _bresenhamhigh!(mask, val, x‚ÇÇ, y‚ÇÇ, x‚ÇÅ, y‚ÇÅ)
    else
      _bresenhamhigh!(mask, val, x‚ÇÅ, y‚ÇÅ, x‚ÇÇ, y‚ÇÇ)
    end
  end
end

function _bresenhamlow!(mask, val, x‚ÇÅ, y‚ÇÅ, x‚ÇÇ, y‚ÇÇ)
  dx = x‚ÇÇ - x‚ÇÅ
  dy = y‚ÇÇ - y‚ÇÅ
  yi = 1
  if dy < 0
    yi = -1
    dy = -dy
  end

  D = 2dy - dx
  y = y‚ÇÅ

  for x in x‚ÇÅ:x‚ÇÇ
    mask[x, y] = val

    if D > 0
      y = y + yi
      D = D + 2dy - 2dx
    else
      D = D + 2dy
    end
  end
end

function _bresenhamhigh!(mask, val, x‚ÇÅ, y‚ÇÅ, x‚ÇÇ, y‚ÇÇ)
  dx = x‚ÇÇ - x‚ÇÅ
  dy = y‚ÇÇ - y‚ÇÅ
  xi = 1
  if dx < 0
    xi = -1
    dx = -dx
  end

  D = 2dx - dy
  x = x‚ÇÅ

  for y in y‚ÇÅ:y‚ÇÇ
    mask[x, y] = val

    if D > 0
      x = x + xi
      D = D + 2dx - 2dy
    else
      D = D + 2dx
    end
  end
end
