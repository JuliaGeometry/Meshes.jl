# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

struct RegularGrid{M<:Manifold,C<:CRS,S<:Tuple,N} <: Grid{M,C,N}
  origin::Point{M,C}
  spacing::S
  offset::Dims{N}
  topology::GridTopology{N}

  function RegularGrid{M,C,S,N}(origin, spacing, offset, topology) where {M<:Manifold,C<:CRS,S<:Tuple,N}
    if !all(s -> s > zero(s), spacing)
      throw(ArgumentError("spacing must be positive"))
    end
    new(origin, spacing, offset, topology)
  end
end

function RegularGrid(
  origin::Point{M,C},
  spacing::Tuple,
  offset::Dims{N},
  topology::GridTopology{N}
) where {M<:Manifold,C<:CRS,N}
  if manifold(origin) <: üåê && !(crs(origin) <: LatLon)
    throw(ArgumentError("origins with Ellipsoid manifold and CRS other than LatLon are not supported"))
  end

  nc = CoordRefSystems.ncoords(C)

  if N ‚â† nc
    throw(ArgumentError("the number of dimensions must be equal to the number of coordinates"))
  end

  if length(spacing) ‚â† nc
    throw(ArgumentError("the number of spacings must be equal to the number of coordinates"))
  end

  us = CoordRefSystems.units(C)
  sp = ntuple(i -> float(_withunit(spacing[i], us[i])), nc)

  RegularGrid{M,C,typeof(sp),N}(origin, sp, offset, topology)
end

function RegularGrid(dims::Dims{N}, origin::Point, spacing::Tuple, offset::Dims{N}=ntuple(i -> 1, N)) where {N}
  if !all(>(0), dims)
    throw(ArgumentError("dimensions must be positive"))
  end
  RegularGrid(origin, spacing, offset, GridTopology(dims))
end

spacing(g::RegularGrid) = g.spacing

offset(g::RegularGrid) = g.offset

function vertex(g::RegularGrid, ijk::Dims)
  ctor = CoordRefSystems.constructor(crs(g))
  orig = CoordRefSystems.values(coords(g.origin))
  vals = orig .+ (ijk .- g.offset) .* g.spacing
  Point(ctor(vals...))
end

function xyz(g::RegularGrid)
  dims = size(g)
  spac = spacing(g)
  orig = CoordRefSystems.values(coords(g.origin))
  ntuple(paramdim(g)) do i
    o, s, d = orig[i], spac[i], dims[i]
    range(start=o, step=s, length=(d + 1))
  end
end

XYZ(g::RegularGrid) = XYZ(xyz(g))

function Base.getindex(g::RegularGrid, I::CartesianIndices)
  @boundscheck _checkbounds(g, I)
  dims = size(I)
  offset = g.offset .- Tuple(first(I)) .+ 1
  RegularGrid(dims, g.origin, g.spacing, offset)
end

function ==(g‚ÇÅ::RegularGrid, g‚ÇÇ::RegularGrid)
  orig‚ÇÅ = CoordRefSystems.values(coords(g‚ÇÅ.origin))
  orig‚ÇÇ = CoordRefSystems.values(coords(g‚ÇÇ.origin))
  g‚ÇÅ.topology == g‚ÇÇ.topology && g‚ÇÅ.spacing == g‚ÇÇ.spacing && orig‚ÇÅ .- orig‚ÇÇ == (g‚ÇÅ.offset .- g‚ÇÇ.offset) .* g‚ÇÅ.spacing
end

# -----------
# IO METHODS
# -----------

function Base.summary(io::IO, g::RegularGrid)
  dims = join(size(g.topology), "√ó")
  name = prettyname(g)
  print(io, "$dims $name")
end

function Base.show(io::IO, ::MIME"text/plain", g::RegularGrid)
  summary(io, g)
  println(io)
  println(io, "‚îú‚îÄ minimum: ", minimum(g))
  println(io, "‚îú‚îÄ maximum: ", maximum(g))
  print(io, "‚îî‚îÄ spacing: ", spacing(g))
end

# -----------------
# HELPER FUNCTIONS
# -----------------

_withunit(x::Number, u) = x * u
_withunit(x::Quantity, u) = uconvert(u, x)
