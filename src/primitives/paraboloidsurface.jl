# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    ParaboloidSurface(apex, radius, focallength)

A paraboloid surface embedded in R¬≥ and extending up to a distance
`radius` from its focal axis, which is aligned along the z direction
and passes through `apex` (the apex of the paraboloid). The equation
of the paraboloid is the following:

```math
f(x, y) = \\frac{(x - x_0)^2 + (y - y_0)^2}{4f} + z_0\\qquad\\text{for } x^2 + y^2 < r^2,
```

where ``(x_0, y_0, z_0)`` is the apex of the parabola, ``f`` is the
focal length, and ``r`` is the clip radius.

    ParaboloidSurface(apex, radius)

This creates a paraboloid surface with focal length equal to 1.

    ParaboloidSurface(apex)

This creates a paraboloid surface with focal length equal to 1 and a rim with unit
radius.

    ParaboloidSurface()

Same as above, but here the apex is at `Apex(0, 0, 0)`.

See also <https://en.wikipedia.org/wiki/Paraboloid>.
"""
struct ParaboloidSurface{C<:CRS,M‚Çö<:Manifold,‚Ñí<:Len} <: Primitive{ùîº{3},C}
  apex::Point{M‚Çö,C}
  radius::‚Ñí
  focallength::‚Ñí
  ParaboloidSurface(apex::Point{M‚Çö,C}, radius::‚Ñí, focallength::‚Ñí) where {C<:CRS,M‚Çö<:Manifold,‚Ñí<:Len} =
    new{C,M‚Çö,float(‚Ñí)}(apex, radius, focallength)
end

ParaboloidSurface(apex::Point, radius::Len, focallength::Len) = ParaboloidSurface(apex, promote(radius, focallength)...)

ParaboloidSurface(apex::Point, radius, focallength) =
  ParaboloidSurface(apex, addunit(radius, u"m"), addunit(focallength, u"m"))

ParaboloidSurface(apex::Tuple, radius, focallength) = ParaboloidSurface(Point(apex), radius, focallength)

ParaboloidSurface(apex::Point, radius) = ParaboloidSurface(apex, radius, oneunit(radius))

ParaboloidSurface(apex::Tuple, radius) = ParaboloidSurface(Point(apex), radius)

ParaboloidSurface(apex::Point) = ParaboloidSurface(apex, oneunit(lentype(apex)))

ParaboloidSurface(apex::Tuple) = ParaboloidSurface(Point(apex))

ParaboloidSurface() = ParaboloidSurface(Point(0, 0, 0))

paramdim(::Type{<:ParaboloidSurface}) = 2

"""
    focallength(p::ParaboloidSurface)

Return the focal length of the paraboloid.
"""
focallength(p::ParaboloidSurface) = p.focallength

"""
    focallength(p::ParaboloidSurface)

Return the radius of the rim of the paraboloid.
"""
radius(p::ParaboloidSurface) = p.radius

"""
    apex(p::ParaboloidSurface)

Return the apex of the paraboloid.
"""
apex(p::ParaboloidSurface) = p.apex

"""
    axis(p::ParaboloidSurface)

Return the focal axis, connecting the focus with the apex of the paraboloid.
The axis is always aligned with the z direction.
"""
function axis(p::ParaboloidSurface)
  f = p.focallength
  Line(p.apex, p.apex + Vec(zero(f), zero(f), f))
end

function centroid(p::ParaboloidSurface)
  c = p.apex
  r = p.radius
  f = p.focallength
  z = r^2 / 4f
  x = zero(z)
  y = zero(z)
  c + Vec(x, y, z / 2)
end

==(p‚ÇÅ::ParaboloidSurface, p‚ÇÇ::ParaboloidSurface) =
  p‚ÇÅ.apex == p‚ÇÇ.apex && p‚ÇÅ.radius == p‚ÇÇ.radius && p‚ÇÅ.focallength == p‚ÇÇ.focallength

Base.isapprox(p‚ÇÅ::ParaboloidSurface, p‚ÇÇ::ParaboloidSurface; atol=atol(lentype(p‚ÇÅ)), kwargs...) =
  isapprox(p‚ÇÅ.apex, p‚ÇÇ.apex; atol, kwargs...) &&
  isapprox(p‚ÇÅ.focallength, p‚ÇÇ.focallength; atol, kwargs...) &&
  isapprox(p‚ÇÅ.radius, p‚ÇÇ.radius; atol, kwargs...)

function (p::ParaboloidSurface)(œÅ, Œ∏)
  T = numtype(lentype(p))
  if (œÅ < 0 || œÅ > 1)
    throw(DomainError((œÅ, Œ∏), "p(œÅ, Œ∏) is not defined for œÅ outside [0, 1]."))
  end
  c = p.apex
  r = p.radius
  f = p.focallength
  l = T(œÅ) * r
  sŒ∏, cŒ∏ = sincospi(2 * T(Œ∏))
  x = l * cŒ∏
  y = l * sŒ∏
  z = (x^2 + y^2) / 4f
  c + Vec(x, y, z)
end
