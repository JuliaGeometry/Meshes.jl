"""
	FibonacciSampling(n)

Generate samples on a sphere using the Fibonacci lattice method.
The parameter `n` specifies the number of points to generate.
In the regular Fibonacci lattice method, the number ϕ is the golden ratio ((1 + √5)/2),
but different numbers can be used, preferably irrational.

## Example

Sample a sphere with 1000 points:

```julia
sample(Sphere((0,0,0), 1), FibonacciSampling(100))

# sample using π instead of the golden ration
sample(Box((0,0),(1,1)), FibonacciSampling(100,π))
"""
struct FibonacciSampling <: SamplingMethod
  n::Int
  ϕ::Real
  function FibonacciSampling(n::Int, ϕ::Real=(1 + √5) / 2)
    if n ≤ 0
      throw(ArgumentError("Size must be positive"))
    end
    new(n, ϕ)
  end
end

function sample(::AbstractRNG, geom::Geometry, method::FibonacciSampling)
  # sample points in square
  i = 0:(method.n - 1)
  x, y = mod.(i / method.ϕ, 1), i / method.n

  # get points for each geometry
  ps = Iterators.map(zip(x, y)) do (x, y)
    Point(_fibonaccipointstogeom(geom, x, y))
  end

  # get transformations to turn canonical geometry into current geometry
  transforms = _fibonaccigeomtransforms(geom)

  Iterators.map(ps) do p
    p |> transforms
  end
end

# these functions map points generated by the Fibonacci lattice method to the corresponding points in different geometries.
# each function takes a geometry type and coordinates (x, y) and returns the transformed coordinates in the specified geometry.
_fibonaccipointstogeom(geom::Box{𝔼{2}}, x, y) = @. (x - 0.5, y - 0.5) |> lentype(geom)
_fibonaccipointstogeom(geom::Sphere, x, y) = Spherical((@. (1, 2π * x, acos(1 - 2 * y)) |> numtype(lentype(geom)))...)
_fibonaccipointstogeom(geom::Disk, x, y) = Cylindrical((@. (√(y), 2π * x, 0) |> numtype(lentype(geom)))...)
_fibonaccipointstogeom(geom::Ball{𝔼{2}}, x, y) = Polar((@. (√(y), 2π * x) |> numtype(lentype(geom)))...)
_fibonaccipointstogeom(geom::TransformedGeometry, x, y) = _fibonaccipointstogeom(geom.geometry, x, y)

# these functions get the transformations mapping canonical geometry to its current shape
# for example, a canonical box is centered at (0.5,0.5) with sides 1,1.
_fibonaccigeomtransforms(geom::Box{𝔼{2}}) = Translate(to(centroid(geom))...) ∘ Scale(ustrip.((geom.max - geom.min))...)
_fibonaccigeomtransforms(geom::Sphere) = Translate(to(geom.center)...) ∘ Scale(map(x -> ustrip(geom.radius), 1:3)...)
_fibonaccigeomtransforms(geom::Disk) =
  Translate(to(geom.plane.p)...) ∘ Rotate(Vec(0, 0, 1), normal(geom.plane)) ∘
  Scale(map(x -> ustrip(geom.radius), 1:3)...)
_fibonaccigeomtransforms(geom::Ball{𝔼{2}}) =
  Translate(to(geom.center)...) ∘ Scale(map(x -> ustrip(geom.radius), 1:2)...)
_fibonaccigeomtransforms(geom::TransformedGeometry) = geom.transform ∘ _fibonaccigeomtransforms(geom.geometry)