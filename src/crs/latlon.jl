# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

abstract type LatitudeLongitude{Datum} <: CRS{Datum} end

"""
    LatLon(lat, lon)
    LatLon{Datum}(lat, lon)
    GeodeticLatLon(lat, lon)
    GeodeticLatLon{Datum}(lat, lon)

Geodetic latitude `lat ‚àà [-90¬∞,90¬∞]` and longitude `lon ‚àà [-180¬∞,180¬∞]` in angular units (default to degree)
with a given `Datum` (default to `WGS84`).

`LatLon` is an alias to `GeodeticLatLon`.

## Examples

```julia
LatLon(45, 45) # add default units
LatLon(45u"¬∞", 45u"¬∞") # integers are converted converted to floats
LatLon((œÄ/4)u"rad", (œÄ/4)u"rad") # radians are converted to degrees
LatLon(45.0u"¬∞", 45.0u"¬∞")
LatLon{WGS84}(45.0u"¬∞", 45.0u"¬∞")
```

See [EPSG:4326](https://epsg.io/4326).
"""
struct GeodeticLatLon{Datum,D<:Deg} <: LatitudeLongitude{Datum}
  lat::D
  lon::D
  GeodeticLatLon{Datum}(lat::D, lon::D) where {Datum,D<:Deg} = new{Datum,float(D)}(lat, lon)
end

GeodeticLatLon{Datum}(lat::Deg, lon::Deg) where {Datum} = GeodeticLatLon{Datum}(promote(lat, lon)...)
GeodeticLatLon{Datum}(lat::Rad, lon::Rad) where {Datum} = GeodeticLatLon{Datum}(rad2deg(lat), rad2deg(lon))
GeodeticLatLon{Datum}(lat::Number, lon::Number) where {Datum} =
  GeodeticLatLon{Datum}(addunit(lat, u"¬∞"), addunit(lon, u"¬∞"))

GeodeticLatLon(args...) = GeodeticLatLon{WGS84}(args...)

const LatLon = GeodeticLatLon

"""
    GeocentricLatLon(lat, lon)
    GeocentricLatLon{Datum}(lat, lon)

Geocentric latitude `lat ‚àà [-90¬∞,90¬∞]` and longitude `lon ‚àà [-180¬∞,180¬∞]` in angular units (default to degree)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
GeocentricLatLon(45, 45) # add default units
GeocentricLatLon(45u"¬∞", 45u"¬∞") # integers are converted converted to floats
GeocentricLatLon((œÄ/4)u"rad", (œÄ/4)u"rad") # radians are converted to degrees
GeocentricLatLon(45.0u"¬∞", 45.0u"¬∞")
GeocentricLatLon{WGS84}(45.0u"¬∞", 45.0u"¬∞")
```
"""
struct GeocentricLatLon{Datum,D<:Deg} <: LatitudeLongitude{Datum}
  lat::D
  lon::D
  GeocentricLatLon{Datum}(lat::D, lon::D) where {Datum,D<:Deg} = new{Datum,float(D)}(lat, lon)
end

GeocentricLatLon{Datum}(lat::Deg, lon::Deg) where {Datum} = GeocentricLatLon{Datum}(promote(lat, lon)...)
GeocentricLatLon{Datum}(lat::Rad, lon::Rad) where {Datum} = GeocentricLatLon{Datum}(rad2deg(lat), rad2deg(lon))
GeocentricLatLon{Datum}(lat::Number, lon::Number) where {Datum} =
  GeocentricLatLon{Datum}(addunit(lat, u"¬∞"), addunit(lon, u"¬∞"))

GeocentricLatLon(args...) = GeocentricLatLon{WGS84}(args...)

"""
    AuthalicLatLon(lat, lon)
    AuthalicLatLon{Datum}(lat, lon)

Authalic latitude `lat ‚àà [-90¬∞,90¬∞]` and longitude `lon ‚àà [-180¬∞,180¬∞]` in angular units (default to degree)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
AuthalicLatLon(45, 45) # add default units
AuthalicLatLon(45u"¬∞", 45u"¬∞") # integers are converted converted to floats
AuthalicLatLon((œÄ/4)u"rad", (œÄ/4)u"rad") # radians are converted to degrees
AuthalicLatLon(45.0u"¬∞", 45.0u"¬∞")
AuthalicLatLon{WGS84}(45.0u"¬∞", 45.0u"¬∞")
```
"""
struct AuthalicLatLon{Datum,D<:Deg} <: LatitudeLongitude{Datum}
  lat::D
  lon::D
  AuthalicLatLon{Datum}(lat::D, lon::D) where {Datum,D<:Deg} = new{Datum,float(D)}(lat, lon)
end

AuthalicLatLon{Datum}(lat::Deg, lon::Deg) where {Datum} = AuthalicLatLon{Datum}(promote(lat, lon)...)
AuthalicLatLon{Datum}(lat::Rad, lon::Rad) where {Datum} = AuthalicLatLon{Datum}(rad2deg(lat), rad2deg(lon))
AuthalicLatLon{Datum}(lat::Number, lon::Number) where {Datum} =
  AuthalicLatLon{Datum}(addunit(lat, u"¬∞"), addunit(lon, u"¬∞"))

AuthalicLatLon(args...) = AuthalicLatLon{WGS84}(args...)

# ------------
# CONVERSIONS
# ------------

# Adapted from PROJ coordinate transformation software
# Initial PROJ 4.3 public domain code was put as Frank Warmerdam as copyright
# holder, but he didn't mean to imply he did the work. Essentially all work was
# done by Gerald Evenden.

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/4D_api.cpp#L774

function Base.convert(::Type{GeocentricLatLon{Datum}}, coords::LatLon{Datum}) where {Datum}
  œï = ustrip(deg2rad(coords.lat))
  e¬≤ = oftype(œï, eccentricity¬≤(ellipsoid(Datum)))
  œï‚Ä≤ = atan((1 - e¬≤) * tan(œï))
  GeocentricLatLon{Datum}(rad2deg(œï‚Ä≤) * u"¬∞", coords.lon)
end

function Base.convert(::Type{LatLon{Datum}}, coords::GeocentricLatLon{Datum}) where {Datum}
  œï‚Ä≤ = ustrip(deg2rad(coords.lat))
  e¬≤ = oftype(œï‚Ä≤, eccentricity¬≤(ellipsoid(Datum)))
  œï = atan(1 / (1 - e¬≤) * tan(œï‚Ä≤))
  LatLon{Datum}(rad2deg(œï) * u"¬∞", coords.lon)
end

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/projections/healpix.cpp#L230
# reference formula: https://mathworld.wolfram.com/AuthalicLatitude.html

function Base.convert(::Type{AuthalicLatLon{Datum}}, coords::LatLon{Datum}) where {Datum}
  üåé = ellipsoid(Datum)
  œï = ustrip(deg2rad(coords.lat))
  e = oftype(œï, eccentricity(üåé))
  e¬≤ = oftype(œï, eccentricity¬≤(üåé))
  ome¬≤ = 1 - e¬≤
  sinœï = sin(œï)
  esinœï = e * sinœï

  q = ome¬≤ * (sinœï / (1 - esinœï^2) - (1 / 2e) * log((1 - esinœï) / (1 + esinœï)))
  # same formula as q, but œï = 90¬∞
  q‚Çö = ome¬≤ * (1 / ome¬≤ - (1 / 2e) * log((1 - e) / (1 + e)))
  qq‚Çö‚Åª¬π = q / q‚Çö

  if abs(qq‚Çö‚Åª¬π) > 1
    # rounding error
    qq‚Çö‚Åª¬π = sign(qq‚Çö‚Åª¬π)
  end

  Œ≤ = asin(qq‚Çö‚Åª¬π)
  AuthalicLatLon{Datum}(rad2deg(Œ≤) * u"¬∞", coords.lon)
end

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/auth.cpp
# reference formula: https://mathworld.wolfram.com/AuthalicLatitude.html

const _P‚ÇÅ‚ÇÅ = 0.33333333333333333333 # 1 / 3
const _P‚ÇÅ‚ÇÇ = 0.17222222222222222222 # 31 / 180
const _P‚ÇÅ‚ÇÉ = 0.10257936507936507937 # 517 / 5040
const _P‚ÇÇ‚ÇÅ = 0.06388888888888888888 # 23 / 360
const _P‚ÇÇ‚ÇÇ = 0.06640211640211640212 # 251 / 3780
const _P‚ÇÉ‚ÇÅ = 0.01677689594356261023 # 761 / 45360

# convert authalic latitude Œ≤ to geodetic latitude œï
function auth2geod(Œ≤, e¬≤)
  e‚Å¥ = e¬≤^2
  e‚Å∂ = e¬≤^3
  P‚ÇÅ‚ÇÅ = oftype(Œ≤, _P‚ÇÅ‚ÇÅ)
  P‚ÇÅ‚ÇÇ = oftype(Œ≤, _P‚ÇÅ‚ÇÇ)
  P‚ÇÅ‚ÇÉ = oftype(Œ≤, _P‚ÇÅ‚ÇÉ)
  P‚ÇÇ‚ÇÅ = oftype(Œ≤, _P‚ÇÇ‚ÇÅ)
  P‚ÇÇ‚ÇÇ = oftype(Œ≤, _P‚ÇÇ‚ÇÇ)
  P‚ÇÉ‚ÇÅ = oftype(Œ≤, _P‚ÇÉ‚ÇÅ)
  Œ≤ + (P‚ÇÅ‚ÇÅ * e¬≤ + P‚ÇÅ‚ÇÇ * e‚Å¥ + P‚ÇÅ‚ÇÉ * e‚Å∂) * sin(2Œ≤) + (P‚ÇÇ‚ÇÅ * e‚Å¥ + P‚ÇÇ‚ÇÇ * e‚Å∂) * sin(4Œ≤) + (P‚ÇÉ‚ÇÅ * e‚Å∂) * sin(6Œ≤)
end

function Base.convert(::Type{LatLon{Datum}}, coords::AuthalicLatLon{Datum}) where {Datum}
  Œ≤ = ustrip(deg2rad(coords.lat))
  e¬≤ = oftype(Œ≤, eccentricity¬≤(ellipsoid(Datum)))
  œï = auth2geod(Œ≤, e¬≤)
  LatLon{Datum}(rad2deg(œï) * u"¬∞", coords.lon)
end
