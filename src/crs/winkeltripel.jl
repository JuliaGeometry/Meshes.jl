# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

struct Winkel{Datum,lat‚ÇÅ,M<:Met} <: CRS{Datum}
  x::M
  y::M
  Winkel{Datum,lat‚ÇÅ}(x::M, y::M) where {Datum,lat‚ÇÅ,M<:Met} = new{Datum,lat‚ÇÅ,float(M)}(x, y)
end

Winkel{Datum,lat‚ÇÅ}(x::Met, y::Met) where {Datum,lat‚ÇÅ} = Winkel{Datum,lat‚ÇÅ}(promote(x, y)...)
Winkel{Datum,lat‚ÇÅ}(x::Len, y::Len) where {Datum,lat‚ÇÅ} = Winkel{Datum,lat‚ÇÅ}(uconvert(u"m", x), uconvert(u"m", y))
Winkel{Datum,lat‚ÇÅ}(x::Number, y::Number) where {Datum,lat‚ÇÅ} = Winkel{Datum,lat‚ÇÅ}(addunit(x, u"m"), addunit(y, u"m"))

"""
    WinkelTripel{Datum}(x, y)

Winkel Tripel coordinates in length units (default to meter) with a given `Datum`.

## Examples

```julia
WinkelTripel{WGS84}(1, 1) # add default units
WinkelTripel{WGS84}(1u"m", 1u"m") # integers are converted converted to floats
WinkelTripel{WGS84}(1.0u"km", 1.0u"km") # length quantities are converted to meters
WinkelTripel{WGS84}(1.0u"m", 1.0u"m")
```

See [ESRI:54042](https://epsg.io/54042).
"""
const WinkelTripel{Datum} = Winkel{Datum,50.467u"¬∞"}

typealias(::Type{ESRI{54042}}) = WinkelTripel{WGS84}

# ------------
# CONVERSIONS
# ------------

function Base.convert(::Type{Winkel{Datum,lat‚ÇÅ}}, coords::LatLon{Datum}) where {Datum,lat‚ÇÅ}
  üåé = ellipsoid(Datum)
  Œª = deg2rad(coords.lon)
  œï = deg2rad(coords.lat)
  œï‚ÇÅ = oftype(œï, deg2rad(lat‚ÇÅ))
  l = ustrip(Œª)
  o = ustrip(œï)
  a = oftype(l, ustrip(majoraxis(üåé)))

  Œ± = acos(cos(œï) * cos(Œª / 2))
  sincŒ± = sinc(Œ± / œÄ) # unnormalized sinc

  x = a / 2 * (l * cos(œï‚ÇÅ) + (2cos(œï) * sin(Œª / 2)) / sincŒ±)
  y = a / 2 * (o + sin(œï) / sincŒ±)

  Winkel{Datum,lat‚ÇÅ}(x * u"m", y * u"m")
end
