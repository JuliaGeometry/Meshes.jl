# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

const Winkel{ID,lat‚ÇÅ,M<:Met} = CRS{ID,@NamedTuple{x::M, y::M},WIII,lat‚ÇÅ}

Winkel{ID,lat‚ÇÅ}(x::M, y::M) where {ID,lat‚ÇÅ,M<:Met} = Winkel{ID,lat‚ÇÅ,float(M)}(x, y)
Winkel{ID,lat‚ÇÅ}(x::Met, y::Met) where {ID,lat‚ÇÅ} = Winkel{ID,lat‚ÇÅ}(promote(x, y)...)
Winkel{ID,lat‚ÇÅ}(x::Len, y::Len) where {ID,lat‚ÇÅ} = Winkel{ID,lat‚ÇÅ}(uconvert(u"m", x), uconvert(u"m", y))
Winkel{ID,lat‚ÇÅ}(x::Number, y::Number) where {ID,lat‚ÇÅ} = Winkel{ID,lat‚ÇÅ}(addunit(x, u"m"), addunit(y, u"m"))

"""
    WinkelTripel(x, y)

Winkel Tripel coordinates in length units (default to meter).

## Examples

```julia
WinkelTripel(1, 1) # add default units
WinkelTripel(1u"m", 1u"m") # integers are converted converted to floats
WinkelTripel(1.0u"km", 1.0u"km") # length quantities are converted to meters
WinkelTripel(1.0u"m", 1.0u"m")
```

See [ESRI:3395](https://epsg.io/53042).
"""
const WinkelTripel = Winkel{ESRI{53042},50.467u"¬∞"}

typealias(::Type{ESRI{53042}}) = WinkelTripel

# ------------
# CONVERSIONS
# ------------

function Base.convert(::Type{Winkel{ID,lat‚ÇÅ}}, coords::LatLon) where {ID,lat‚ÇÅ}
  üåé = ellipsoid(Winkel{ID,lat‚ÇÅ})
  Œª = deg2rad(coords.lon)
  œï = deg2rad(coords.lat)
  œï‚ÇÅ = oftype(œï, deg2rad(lat‚ÇÅ))
  l = ustrip(Œª)
  o = ustrip(œï)
  a = oftype(l, ustrip(majoraxis(üåé)))
  Œ± = acos(cos(œï) * cos(Œª / 2))
  sincŒ± = sin(Œ±) / Œ± # unnormalized sinc
  x = a / 2 * (l * cos(œï‚ÇÅ) + (2cos(œï) * sin(Œª / 2)) / sincŒ±)
  y = a / 2 * (o + sin(œï) / sincŒ±)
  Winkel{ID,lat‚ÇÅ}(x * u"m", y * u"m")
end
