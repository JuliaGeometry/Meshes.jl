# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    EqualAreaCylindrical{latâ‚œâ‚›,Datum}

Equal Area Cylindrical CRS with latitude of true scale `latâ‚œâ‚›` in degrees and a given `Datum`.
"""
struct EqualAreaCylindrical{latâ‚œâ‚›,Datum,M<:Met} <: CRS{Datum}
  x::M
  y::M
  EqualAreaCylindrical{latâ‚œâ‚›,Datum}(x::M, y::M) where {latâ‚œâ‚›,Datum,M<:Met} = new{latâ‚œâ‚›,Datum,float(M)}(x, y)
end

EqualAreaCylindrical{latâ‚œâ‚›,Datum}(x::Met, y::Met) where {latâ‚œâ‚›,Datum} =
  EqualAreaCylindrical{latâ‚œâ‚›,Datum}(promote(x, y)...)
EqualAreaCylindrical{latâ‚œâ‚›,Datum}(x::Len, y::Len) where {latâ‚œâ‚›,Datum} =
  EqualAreaCylindrical{latâ‚œâ‚›,Datum}(uconvert(u"m", x), uconvert(u"m", y))
EqualAreaCylindrical{latâ‚œâ‚›,Datum}(x::Number, y::Number) where {latâ‚œâ‚›,Datum} =
  EqualAreaCylindrical{latâ‚œâ‚›,Datum}(addunit(x, u"m"), addunit(y, u"m"))

EqualAreaCylindrical{latâ‚œâ‚›}(args...) where {latâ‚œâ‚›} = EqualAreaCylindrical{latâ‚œâ‚›,WGS84}(args...)

"""
    Lambert(x, y)
    Lambert{Datum}(x, y)

Lambert cylindrical equal-area coordinates in length units (default to meter)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
Lambert(1, 1) # add default units
Lambert(1u"m", 1u"m") # integers are converted converted to floats
Lambert(1.0u"km", 1.0u"km") # length quantities are converted to meters
Lambert(1.0u"m", 1.0u"m")
Lambert{WGS84}(1.0u"m", 1.0u"m")
```

See [ESRI:54034](https://epsg.io/54034).
"""
const Lambert{Datum} = EqualAreaCylindrical{0.0u"Â°",Datum}

"""
    Behrmann(x, y)
    Behrmann{Datum}(x, y)

Behrmann coordinates in length units (default to meter)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
Behrmann(1, 1) # add default units
Behrmann(1u"m", 1u"m") # integers are converted converted to floats
Behrmann(1.0u"km", 1.0u"km") # length quantities are converted to meters
Behrmann(1.0u"m", 1.0u"m")
Behrmann{WGS84}(1.0u"m", 1.0u"m")
```

See [ESRI:54017](https://epsg.io/54017).
"""
const Behrmann{Datum} = EqualAreaCylindrical{30.0u"Â°",Datum}

"""
    GallPeters(x, y)
    GallPeters{Datum}(x, y)

Gall-Peters coordinates in length units (default to meter)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
GallPeters(1, 1) # add default units
GallPeters(1u"m", 1u"m") # integers are converted converted to floats
GallPeters(1.0u"km", 1.0u"km") # length quantities are converted to meters
GallPeters(1.0u"m", 1.0u"m")
GallPeters{WGS84}(1.0u"m", 1.0u"m")
```
"""
const GallPeters{Datum} = EqualAreaCylindrical{45.0u"Â°",Datum}

# ------------
# CONVERSIONS
# ------------

function Base.convert(::Type{EqualAreaCylindrical{latâ‚œâ‚›,Datum}}, coords::LatLon{Datum}) where {latâ‚œâ‚›,Datum}
  ðŸŒŽ = ellipsoid(Datum)
  Î» = deg2rad(coords.lon)
  Ï• = deg2rad(coords.lat)
  Î»â‚€ = oftype(Î», deg2rad(longitudeâ‚’(Datum)))
  Ï•â‚œâ‚› = oftype(Ï•, deg2rad(latâ‚œâ‚›))
  l = ustrip(Î»)
  lâ‚€ = ustrip(Î»â‚€)
  a = oftype(l, ustrip(majoraxis(ðŸŒŽ)))
  e = oftype(l, eccentricity(ðŸŒŽ))
  eÂ² = oftype(l, eccentricityÂ²(ðŸŒŽ))

  kâ‚€ = cos(Ï•â‚œâ‚›) / sqrt(1 - eÂ² * sin(Ï•â‚œâ‚›)^2)
  sinÏ• = sin(Ï•)
  esinÏ• = e * sinÏ•
  q = (1 - eÂ²) * (sinÏ• / (1 - esinÏ•^2) - (1 / 2e) * log((1 - esinÏ•) / (1 + esinÏ•)))

  x = a * kâ‚€ * (l - lâ‚€)
  y = a * q / 2kâ‚€

  EqualAreaCylindrical{latâ‚œâ‚›,Datum}(x * u"m", y * u"m")
end
