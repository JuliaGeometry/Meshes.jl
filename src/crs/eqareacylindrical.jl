# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    EqualAreaCylindrical{Datum,latâ‚œâ‚›}

Equal Area Cylindrical CRS with a given `Datum` and latitude of true scale `latâ‚œâ‚›` in degrees.
"""
struct EqualAreaCylindrical{Datum,latâ‚œâ‚›,M<:Met} <: CRS{Datum}
  x::M
  y::M
  EqualAreaCylindrical{Datum,latâ‚œâ‚›}(x::M, y::M) where {Datum,latâ‚œâ‚›,M<:Met} = new{Datum,latâ‚œâ‚›,float(M)}(x, y)
end

EqualAreaCylindrical{Datum,latâ‚œâ‚›}(x::Met, y::Met) where {Datum,latâ‚œâ‚›} =
  EqualAreaCylindrical{Datum,latâ‚œâ‚›}(promote(x, y)...)
EqualAreaCylindrical{Datum,latâ‚œâ‚›}(x::Len, y::Len) where {Datum,latâ‚œâ‚›} =
  EqualAreaCylindrical{Datum,latâ‚œâ‚›}(uconvert(u"m", x), uconvert(u"m", y))
EqualAreaCylindrical{Datum,latâ‚œâ‚›}(x::Number, y::Number) where {Datum,latâ‚œâ‚›} =
  EqualAreaCylindrical{Datum,latâ‚œâ‚›}(addunit(x, u"m"), addunit(y, u"m"))

"""
    Lambert{Datum}(x, y)

Lambert cylindrical equal-area coordinates in length units (default to meter) with a given `Datum`.

## Examples

```julia
Lambert{WGS84}(1, 1) # add default units
Lambert{WGS84}(1u"m", 1u"m") # integers are converted converted to floats
Lambert{WGS84}(1.0u"km", 1.0u"km") # length quantities are converted to meters
Lambert{WGS84}(1.0u"m", 1.0u"m")
```

See [ESRI:54034](https://epsg.io/54034).
"""
const Lambert{Datum} = EqualAreaCylindrical{Datum,0.0u"Â°"}

typealias(::Type{ESRI{54034}}) = Lambert{WGS84}

"""
    Behrmann{Datum}(x, y)

Behrmann coordinates in length units (default to meter) with a given `Datum`.

## Examples

```julia
Behrmann{WGS84}(1, 1) # add default units
Behrmann{WGS84}(1u"m", 1u"m") # integers are converted converted to floats
Behrmann{WGS84}(1.0u"km", 1.0u"km") # length quantities are converted to meters
Behrmann{WGS84}(1.0u"m", 1.0u"m")
```

See [ESRI:54017](https://epsg.io/54017).
"""
const Behrmann{Datum} = EqualAreaCylindrical{Datum,30.0u"Â°"}

typealias(::Type{ESRI{54017}}) = Behrmann{WGS84}

"""
    GallPeters{Datum}(x, y)

Gall-Peters coordinates in length units (default to meter) with a given `Datum`.

## Examples

```julia
GallPeters{WGS84}(1, 1) # add default units
GallPeters{WGS84}(1u"m", 1u"m") # integers are converted converted to floats
GallPeters{WGS84}(1.0u"km", 1.0u"km") # length quantities are converted to meters
GallPeters{WGS84}(1.0u"m", 1.0u"m")
```
"""
const GallPeters{Datum} = EqualAreaCylindrical{Datum,45.0u"Â°"}

# ------------
# CONVERSIONS
# ------------

function Base.convert(::Type{EqualAreaCylindrical{Datum,latâ‚œâ‚›}}, coords::LatLon{Datum}) where {Datum,latâ‚œâ‚›}
  ðŸŒŽ = ellipsoid(Datum)
  Î» = deg2rad(coords.lon)
  Ï• = deg2rad(coords.lat)
  Î»â‚€ = oftype(Î», deg2rad(longitudeâ‚’(Datum)))
  Ï•â‚œâ‚› = oftype(Ï•, deg2rad(latâ‚œâ‚›))
  l = ustrip(Î»)
  lâ‚€ = ustrip(Î»â‚€)
  a = oftype(l, ustrip(majoraxis(ðŸŒŽ)))
  e = oftype(l, eccentricity(ðŸŒŽ))
  eÂ² = oftype(l, eccentricityÂ²(ðŸŒŽ))

  kâ‚€ = cos(Ï•â‚œâ‚›) / sqrt(1 - eÂ² * sin(Ï•â‚œâ‚›)^2)
  sinÏ• = sin(Ï•)
  esinÏ• = e * sinÏ•
  q = (1 - eÂ²) * (sinÏ• / (1 - esinÏ•^2) - (1 / 2e) * log((1 - esinÏ•) / (1 + esinÏ•)))

  x = a * kâ‚€ * (l - lâ‚€)
  y = a * q / 2kâ‚€

  EqualAreaCylindrical{Datum,latâ‚œâ‚›}(x * u"m", y * u"m")
end
