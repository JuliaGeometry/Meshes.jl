# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    signarea(A, B, C)

Compute signed area of triangle formed by points `A`, `B` and `C`.
"""
function signarea(A::Point, B::Point, C::Point)
  checkdim(A, 2)
  ((B - A) √ó (C - A)) / 2
end

"""
    householderbasis(n)

Returns a pair of orthonormal tangent vectors `u` and `v` from a normal `n`,
such that `u`, `v`, and `n` form a right-hand orthogonal system.

## References

* D.S. Lopes et al. 2013. ["Tangent vectors to a 3-D surface normal: A geometric tool
  to find orthogonal vectors based on the Householder transformation"]
  (https://doi.org/10.1016/j.cad.2012.11.003)
"""
function householderbasis(n::Vec{3,‚Ñí}) where {‚Ñí}
  nÃÇ = norm(n)
  i = argmax(n .+ nÃÇ)
  nÃÇ·µ¢ = Vec(ntuple(j -> j == i ? nÃÇ : zero(‚Ñí), 3))
  h = n + nÃÇ·µ¢
  H = (I - 2h * transpose(h) / (transpose(h) * h)) * unit(‚Ñí)
  u, v = [H[:, j] for j in 1:3 if j != i]
  i == 2 && ((u, v) = (v, u))
  Vec(u), Vec(v)
end

"""
    svdbasis(points)

Returns the 2D basis that retains most of the variance in the list of 3D `points`
using the singular value decomposition (SVD).

See <https://math.stackexchange.com/a/99317>.
"""
function svdbasis(p::AbstractVector{<:Point})
  checkdim(first(p), 3)
  ‚Ñí = lentype(eltype(p))
  X = reduce(hcat, to.(p))
  Œº = sum(X, dims=2) / size(X, 2)
  Z = X .- Œº
  U = usvd(Z).U
  u = Vec(U[:, 1]...)
  v = Vec(U[:, 2]...)
  n = Vec(zero(‚Ñí), zero(‚Ñí), oneunit(‚Ñí))
  isnegative((u √ó v) ‚ãÖ n) ? (v, u) : (u, v)
end

"""
    intersectparameters(a, b, c, d)

Compute the parameters `Œª‚ÇÅ` and `Œª‚ÇÇ` of the lines 
`a + Œª‚ÇÅ ‚ãÖ v‚Éó‚ÇÅ`, with `v‚Éó‚ÇÅ = b - a` and
`c + Œª‚ÇÇ ‚ãÖ v‚Éó‚ÇÇ`, with `v‚Éó‚ÇÇ = d - c` spanned by the input
points `a`, `b` resp. `c`, `d` such that to yield line
points with minimal distance or the intersection point
(if lines intersect).

Furthermore, the ranks `r` of the matrix of the linear
system `A ‚ãÖ Œª‚Éó = y‚Éó`, with `A = [v‚Éó‚ÇÅ -v‚Éó‚ÇÇ], y‚Éó = c - a`
and the rank `r‚Çê` of the augmented matrix `[A y‚Éó]` are
calculated in order to identify the intersection type:

- Intersection: r == r‚Çê == 2
- Colinear: r == r‚Çê == 1
- No intersection: r != r‚Çê
  - No intersection and parallel:  r == 1, r‚Çê == 2
  - No intersection, skew lines: r == 2, r‚Çê == 3
"""
function intersectparameters(a::Point, b::Point, c::Point, d::Point)
  A = ustrip.([(b - a) (c - d)])
  y = ustrip.(c - a)
  T = eltype(A)

  # calculate the rank of the augmented matrix by checking
  # the zero entries of the diagonal of R
  _, R = qr([A y])

  # for Dim == 2 one has to check the L1 norm of rows as 
  # there are more columns than rows
  œÑ = atol(T)
  r‚Çê = sum(>(œÑ), sum(abs, R, dims=2))

  # calculate the rank of the rectangular matrix
  r = sum(>(œÑ), sum(abs, view(R, :, 1:2), dims=2))

  # calculate parameters of intersection or closest point
  if r ‚â• 2
    Œª = A \ y
    Œª‚ÇÅ, Œª‚ÇÇ = Œª[1], Œª[2]
  else # parallel or collinear
    Œª‚ÇÅ, Œª‚ÇÇ = zero(T), zero(T)
  end

  Œª‚ÇÅ, Œª‚ÇÇ, r, r‚Çê
end

"""
    cartesianrange(grid, limits)

Return the Cartesian range for the elements of the
`grid` within given `limits` along each dimension.
"""
function cartesianrange(grid::CartesianGrid, limits)
  # grid properties
  or = minimum(grid)
  sp = spacing(grid)
  sz = size(grid)
  nd = length(sz)

  # box from limits
  bmin = withcrs(grid, ntuple(i -> first(limits[i]), nd))
  bmax = withcrs(grid, ntuple(i -> last(limits[i]), nd))
  bbox = Box(bmin, bmax)

  # intersection of boxes
  lo, up = extrema(boundingbox(grid) ‚à© bbox)

  # Cartesian indices of new corners
  ijk‚Çõ = max.(ceil.(Int, (lo - or) ./ sp), 1)
  ijk‚Çë = min.(floor.(Int, (up - or) ./ sp) .+ 1, sz)

  # Cartesian range from corner to corner
  CartesianIndex(Tuple(ijk‚Çõ)):CartesianIndex(Tuple(ijk‚Çë))
end

function cartesianrange(grid::RectilinearGrid, limits)
  # grid properties
  sz = size(grid)
  nd = length(sz)

  # box from limits
  bmin = withcrs(grid, ntuple(i -> first(limits[i]), nd))
  bmax = withcrs(grid, ntuple(i -> last(limits[i]), nd))
  bbox = Box(bmin, bmax)

  # intersection of boxes
  lo, up = to.(extrema(boundingbox(grid) ‚à© bbox))

  # integer coordinates of lower point
  ijk‚Çõ = ntuple(nd) do i
    findlast(x -> x ‚â§ lo[i], xyz(grid)[i])
  end

  # integer coordinates of upper point
  ijk‚Çë = ntuple(nd) do i
    findfirst(x -> x ‚â• up[i], xyz(grid)[i])
  end

  # integer coordinates of elements
  CartesianIndex(ijk‚Çõ):CartesianIndex(ijk‚Çë .- 1)
end

function cartesianrange(grid::Grid{ùîº{2}}, limits)
  nx, ny = vsize(grid)

  (x‚Çõ, x‚Çë), (y‚Çõ, y‚Çë) = limits

  a = convert(Cartesian, coords(vertex(grid, (1, 1))))
  b = convert(Cartesian, coords(vertex(grid, (nx, 1))))
  c = convert(Cartesian, coords(vertex(grid, (1, ny))))

  xmin = max(x‚Çõ, a.x)
  ymin = max(y‚Çõ, a.y)
  xmax = min(x‚Çë, b.x)
  ymax = min(y‚Çë, c.y)

  i‚Çõ = findlast(1:nx) do i
    p = vertex(grid, (i, 1))
    c = convert(Cartesian, coords(p))
    c.x ‚â§ xmin
  end
  i‚Çë = findfirst(1:nx) do i
    p = vertex(grid, (i, 1))
    c = convert(Cartesian, coords(p))
    c.x ‚â• xmax
  end
  j‚Çõ = findlast(1:ny) do i
    p = vertex(grid, (1, i))
    c = convert(Cartesian, coords(p))
    c.y ‚â§ ymin
  end
  j‚Çë = findfirst(1:ny) do i
    p = vertex(grid, (1, i))
    c = convert(Cartesian, coords(p))
    c.y ‚â• ymax
  end

  if i‚Çõ == i‚Çë || j‚Çõ == j‚Çë
    throw(ArgumentError("the passed limits are not valid for the grid"))
  end

  CartesianIndex(i‚Çõ, j‚Çõ):CartesianIndex(i‚Çë - 1, j‚Çë - 1)
end

function cartesianrange(grid::Grid{ùîº{3}}, limits)
  nx, ny, nz = vsize(grid)

  (x‚Çõ, x‚Çë), (y‚Çõ, y‚Çë), (z‚Çõ, z‚Çë) = limits

  a = convert(Cartesian, coords(vertex(grid, (1, 1, 1))))
  b = convert(Cartesian, coords(vertex(grid, (nx, 1, 1))))
  c = convert(Cartesian, coords(vertex(grid, (1, ny, 1))))
  d = convert(Cartesian, coords(vertex(grid, (1, 1, nz))))

  xmin = max(x‚Çõ, a.x)
  ymin = max(y‚Çõ, a.y)
  zmin = max(z‚Çõ, a.z)
  xmax = min(x‚Çë, b.x)
  ymax = min(y‚Çë, c.y)
  zmax = min(z‚Çë, d.z)

  i‚Çõ = findlast(1:nx) do i
    p = vertex(grid, (i, 1, 1))
    c = convert(Cartesian, coords(p))
    c.x ‚â§ xmin
  end
  i‚Çë = findfirst(1:nx) do i
    p = vertex(grid, (i, 1, 1))
    c = convert(Cartesian, coords(p))
    c.x ‚â• xmax
  end
  j‚Çõ = findlast(1:ny) do i
    p = vertex(grid, (1, i, 1))
    c = convert(Cartesian, coords(p))
    c.y ‚â§ ymin
  end
  j‚Çë = findfirst(1:ny) do i
    p = vertex(grid, (1, i, 1))
    c = convert(Cartesian, coords(p))
    c.y ‚â• ymax
  end
  k‚Çõ = findlast(1:nz) do i
    p = vertex(grid, (1, 1, i))
    c = convert(Cartesian, coords(p))
    c.z ‚â§ zmin
  end
  k‚Çë = findfirst(1:nz) do i
    p = vertex(grid, (1, 1, i))
    c = convert(Cartesian, coords(p))
    c.z ‚â• zmax
  end

  if i‚Çõ == i‚Çë || j‚Çõ == j‚Çë || k‚Çõ == k‚Çë
    throw(ArgumentError("the passed limits are not valid for the grid"))
  end

  CartesianIndex(i‚Çõ, j‚Çõ, k‚Çõ):CartesianIndex(i‚Çë - 1, j‚Çë - 1, k‚Çë - 1)
end

function cartesianrange(grid::Grid{üåê}, limits)
  nlon, nlat = vsize(grid)
  (llonmin, llonmax), (llatmin, llatmax) = limits

  a = convert(Cartesian, coords(vertex(grid, (1, 1))))
  b = convert(Cartesian, coords(vertex(grid, (nlon, 1))))
  c = convert(Cartesian, coords(vertex(grid, (1, nlat))))

  lonmin = max(llonmin, a.lon)
  latmin = max(llatmin, a.lat)
  lonmax = min(llonmax, b.lon)
  latmax = min(llatmax, c.lat)

  i‚Çõ = findlast(1:nlon) do i
    p = vertex(grid, (i, 1))
    c = convert(LatLon, coords(p))
    c.lon ‚â§ lonmin
  end
  i‚Çë = findfirst(1:nlon) do i
    p = vertex(grid, (i, 1))
    c = convert(LatLon, coords(p))
    c.lon ‚â• lonmax
  end
  j‚Çõ = findlast(1:nlat) do i
    p = vertex(grid, (1, i))
    c = convert(LatLon, coords(p))
    c.lat ‚â§ latmin
  end
  j‚Çë = findfirst(1:nlat) do i
    p = vertex(grid, (1, i))
    c = convert(LatLon, coords(p))
    c.lat ‚â• latmax
  end

  if i‚Çõ == i‚Çë || j‚Çõ == j‚Çë
    throw(ArgumentError("the passed limits are not valid for the grid"))
  end

  CartesianIndex(i‚Çõ, j‚Çõ):CartesianIndex(i‚Çë - 1, j‚Çë - 1)
end
