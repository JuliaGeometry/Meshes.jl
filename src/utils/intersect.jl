# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------
"""
    bentleyottmann(segments; [digits])

Compute pairwise intersections between n `segments`
with `digits` precision in O(n‚ãÖlog(n)) time using
Bentley-Ottmann sweep line algorithm.

By default, set `digits` based on the absolute
tolerance of the length type of the segments.

## References

* Bentley & Ottmann 1979. [Algorithms for reporting and counting
  geometric intersections](https://ieeexplore.ieee.org/document/1675432)
"""
function bentleyottmann(segments; digits=_digits(segments))
  TOL = 1 / 10^digits # precomputed tolerance for floating point comparisons

  # orient segments
  segs = map(segments) do s
    a, b = coordround.(extrema(s); digits)
    a > b ? (b, a) : (a, b)
  end

  # retrieve types
  T = lentype(first(segs)[1])
  P = typeof(first(segs)[1])
  S = Tuple{P,P}

  # initialization
  ùí¨ = BinaryTrees.AVLTree{P}()
  ‚Ñõ = BinaryTrees.AVLTree{_SweepSegment{T,P}}()
  ‚Ñ¨ = Dict{P,Vector{S}}()
  ‚Ñ∞ = Dict{P,Vector{S}}()
  lookup = Dict{S,Int}()
  for (i, (a, b)) in enumerate(segs)
    BinaryTrees.insert!(ùí¨, a)
    BinaryTrees.insert!(ùí¨, b)
    haskey(‚Ñ¨, a) ? push!(‚Ñ¨[a], (a, b)) : (‚Ñ¨[a] = [(a, b)])
    haskey(‚Ñ∞, b) ? push!(‚Ñ∞[b], (a, b)) : (‚Ñ∞[b] = [(a, b)])
    lookup[(a, b)] = i
  end

  # sweep line algorithm
  points = Vector{P}()
  seginds = Vector{Vector{Int}}()
  sweepline = _initsweep(segs)
  while !BinaryTrees.isempty(ùí¨)
    # current point (or event)
    p = BinaryTrees.key(BinaryTrees.minnode(ùí¨))

    # delete point from event queue
    BinaryTrees.delete!(ùí¨, p)
    # handle event, i.e. update ùí¨, ‚Ñõ and ‚Ñ≥
    ‚Ñ¨‚Çö = get(‚Ñ¨, p, S[]) # segments with p at the begin
    ‚Ñ∞‚Çö = get(‚Ñ∞, p, S[]) # segments with p at the end
    ‚Ñ≥‚Çö = S[]
    _findintersections!(‚Ñ≥‚Çö, ‚Ñõ, p, TOL) # segments with p at the middle
    activesegs = Set(‚Ñ¨‚Çö ‚à™ ‚Ñ≥‚Çö)

    # report intersections
    if !isempty(activesegs) || !isempty(‚Ñ∞‚Çö)
      inds = Set{Int}()
      for s in activesegs ‚à™ ‚Ñ∞‚Çö
        push!(inds, lookup[s])
      end
      push!(points, p)
      push!(seginds, collect(inds))
    end

    # handle status line
    _handlestatus!(‚Ñõ, ‚Ñ¨‚Çö, ‚Ñ≥‚Çö, ‚Ñ∞‚Çö, sweepline, p, TOL)

    if isempty(activesegs)
      for s in ‚Ñ∞‚Çö
        s‚Çó, s·µ£ = BinaryTrees.prevnext(‚Ñõ, _SweepSegment(s, sweepline))
        isnothing(s‚Çó) || isnothing(s·µ£) || _newevent!(ùí¨, p, _keyseg(s‚Çó), _keyseg(s·µ£), digits)
      end
    else
      BinaryTrees.isempty(‚Ñõ) || _handlebottom!(activesegs, ‚Ñõ, sweepline, ùí¨, p, digits)

      BinaryTrees.isempty(‚Ñõ) || _handletop!(activesegs, ‚Ñõ, sweepline, ùí¨, p, digits)
    end
  end

  (points, seginds)
end

##
## handling functions
##

function _handlestatus!(‚Ñõ, ‚Ñ¨‚Çö, ‚Ñ≥‚Çö, ‚Ñ∞‚Çö, sweepline, p, TOL)
  for s in reverse(‚Ñ∞‚Çö ‚à™ ‚Ñ≥‚Çö)
    segsweep = _SweepSegment(s, sweepline)
    isnothing(BinaryTrees.search(‚Ñõ, segsweep)) || BinaryTrees.delete!(‚Ñõ, segsweep)
  end

  sweepline.point = _nudge(p, TOL)

  for s in ‚Ñ¨‚Çö ‚à™ ‚Ñ≥‚Çö
    BinaryTrees.insert!(‚Ñõ, _SweepSegment(s, sweepline))
  end
end

function _handlebottom!(activesegs, ‚Ñõ, sweepline, ùí¨, p, digits)
  s‚Ä≤ = BinaryTrees.key(_minsearch(‚Ñõ, activesegs, sweepline))

  s‚Çó, _ = !isnothing(s‚Ä≤) ? BinaryTrees.prevnext(‚Ñõ, s‚Ä≤) : (nothing, nothing)
  if !isnothing(s‚Çó)
    _newevent!(ùí¨, p, _keyseg(s‚Çó), _segment(s‚Ä≤), digits)
  end
end

function _handletop!(activesegs, ‚Ñõ, sweepline, ùí¨, p, digits)
  s‚Ä≥ = BinaryTrees.key(_maxsearch(‚Ñõ, activesegs, sweepline))

  _, s·µ§ = !isnothing(s‚Ä≥) ? BinaryTrees.prevnext(‚Ñõ, s‚Ä≥) : (nothing, nothing)
  if !isnothing(s·µ§)
    _newevent!(ùí¨, p, _segment(s‚Ä≥), _keyseg(s·µ§), digits)
  end
end

# -----------------
# HELPER FUNCTIONS
# -----------------

function _newevent!(ùí¨, p, s‚ÇÅ, s‚ÇÇ, digits)
  intersection(Segment(s‚ÇÅ), Segment(s‚ÇÇ)) do I
    if type(I) == Crossing || type(I) == EdgeTouching
      p‚Ä≤ = coordround(get(I); digits)
      if p‚Ä≤ ‚â• p
        BinaryTrees.insert!(ùí¨, p‚Ä≤)
      end
    end
  end
end

# find segments that intersect with the point p
function _findintersections!(‚Ñ≥‚Çö, ‚Ñõ, p, TOL)
  x, y = CoordRefSystems.values(coords(p))
  tol = TOL * unit(x) # ensure TOL is in the same unit as x and y
  _search!(BinaryTrees.root(‚Ñõ), ‚Ñ≥‚Çö, x, y, tol)
  ‚Ñ≥‚Çö
end

function _search!(node, ‚Ñ≥‚Çö, x, y, TOL)
  isnothing(node) && return
  seg = _segment(BinaryTrees.key(node))
  x‚ÇÅ, y‚ÇÅ = CoordRefSystems.values(coords(seg[1]))
  x‚ÇÇ, y‚ÇÇ = CoordRefSystems.values(coords(seg[2]))

  # Precompute reused values
  dx, dy = x‚ÇÇ - x‚ÇÅ, y‚ÇÇ - y‚ÇÅ
  ‚Ñí = hypot(dx, dy) # handling precision issues

  # Ensure the point is not the endpoint (avoids duplicates)
  skip = (x‚ÇÇ - TOL ‚â§ x ‚â§ x‚ÇÇ + TOL) && (y‚ÇÇ - TOL ‚â§ y ‚â§ y‚ÇÇ + TOL)
  # if collinear and not an endpoint
  collinear = dy * (x - x‚ÇÅ) - dx * (y - y‚ÇÅ)
  boundcheck = (x‚ÇÅ - TOL ‚â§ x ‚â§ x‚ÇÇ + TOL) && (y‚ÇÅ - TOL ‚â§ y ‚â§ y‚ÇÇ + TOL)

  if abs(collinear) ‚â§ TOL * ‚Ñí #&& boundcheck
    skip || push!(‚Ñ≥‚Çö, seg)
  end

  # using difference in y to determine the side of the segment
  # needed to avoid recursion depth and floating point issues
  yÃÇ = y‚ÇÅ + (y‚ÇÇ - y‚ÇÅ) * (x - x‚ÇÅ) / dx # y coordinate of the segment at x

  diff = y - yÃÇ # difference between the point and the segment

  if diff < -TOL
    _search!(BinaryTrees.left(node), ‚Ñ≥‚Çö, x, y, TOL)
  elseif diff > TOL
    _search!(BinaryTrees.right(node), ‚Ñ≥‚Çö, x, y, TOL)
  else
    # if the point is on the segment, check both sides
    _search!(BinaryTrees.left(node), ‚Ñ≥‚Çö, x, y, TOL)
    _search!(BinaryTrees.right(node), ‚Ñ≥‚Çö, x, y, TOL)
  end
end

# find the minimum segment among active segments in tree
function _minsearch(‚Ñõ, activesegs, sweepline)
  activeordered = sort([_SweepSegment(s, sweepline) for s in activesegs])
  BinaryTrees.search(‚Ñõ, activeordered[begin])
end

# find the maximum segment among active segments in tree
function _maxsearch(‚Ñõ, activesegs, sweepline)
  activeordered = sort([_SweepSegment(s, sweepline) for s in activesegs])
  BinaryTrees.search(‚Ñõ, activeordered[end])
end

# compute rounding digits
function _digits(segments)
  s = first(segments)
  ‚Ñí = lentype(s)
  œÑ = ustrip(atol(‚Ñí))
  round(Int, -log10(œÑ)) - 1
end

# convenience function to get the segment from the node
function _keyseg(segment)
  _segment(BinaryTrees.key(segment))
end
# nudge the sweepline to get correct ‚Ñõ ordering
function _nudge(p, TOL)
  x, y = CoordRefSystems.values(coords(p))
  nudgefactor = unit(x) * TOL * 2
  Point(x + nudgefactor, y + nudgefactor)
end

# ----------------
# DATA STRUCTURES
# ----------------

# tracks sweepline and current y position for searching
mutable struct _SweepLine{P<:Point}
  point::P
end
_sweeppoint(sweepline::_SweepLine) = getfield(sweepline, :point)
_sweepx(sweepline::_SweepLine) = CoordRefSystems.values(coords(_sweeppoint(sweepline)))[1]
_sweepy(sweepline::_SweepLine) = CoordRefSystems.values(coords(_sweeppoint(sweepline)))[2]

# compute the intersection of a segment with the sweepline
function _sweepintersect(seg, sweepline)
  p‚ÇÅ, p‚ÇÇ = coords.(seg)
  x‚ÇÅ, y‚ÇÅ = CoordRefSystems.values(p‚ÇÅ)
  x‚ÇÇ, y‚ÇÇ = CoordRefSystems.values(p‚ÇÇ)
  T = eltype(x‚ÇÅ)

  x = T(_sweepx(sweepline))
  y = T(_sweepy(sweepline))

  if abs(x‚ÇÅ - x‚ÇÇ) < atol(eltype(x‚ÇÅ))
    return T(min(y, y‚ÇÇ)) # vertical goes at end
  end

  t = (x - x‚ÇÅ) / (x‚ÇÇ - x‚ÇÅ)
  T(y‚ÇÅ + t * (y‚ÇÇ - y‚ÇÅ))
end

# takes input segment and assigns where it intersects sweepline
mutable struct _SweepSegment{T,P<:Point}
  seg::Tuple{P,P}
  xintersect::T
end

# constructor for _SweepSegment
function _SweepSegment(seg::Tuple{P,P}, sweepline::_SweepLine) where {P<:Point}
  xintersect = _sweepintersect(seg, sweepline)
  T = typeof(xintersect)
  _SweepSegment{T,P}(seg, xintersect)
end

_segment(sweepsegment::_SweepSegment) = sweepsegment.seg
_xintersect(sweepsegment::_SweepSegment) = getfield(sweepsegment, :xintersect)

Base.isless(a::_SweepSegment, b::_SweepSegment) = begin
  # if segments same, return false
  if _segment(a) == _segment(b)
    return false
  end
  ya, yb = _xintersect(a), _xintersect(b)

  # if segments are separated over y, check ya < yb
  if abs(ya - yb) > atol(eltype(ya))
    return ya < yb
  end

  # fallback to x-coordinates
  _segment(a) != _segment(b) && _segment(a) < _segment(b)
end

# initialize the sweep line with them minimum
function _initsweep(segs)
  U = lentype(coords(segs[1][1]))
  _SweepLine(Point(U(-Inf), U(-Inf)))
end
